---
AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS API GW creation with Usage Plans"
#Manual Actions:
# 1- Copy "App client secret" from Userpool>GeneralSettings>AppClient to Lambda>Code>CLIENT_SECRET (CF can not do this for now)
# 2- Logo Upload Userpool>GeneralSettings>AppIntegration>UICustomization>Upload  (CF can not do this for now)
# 3- User Creation over Cognito Userpool>GeneralSettings>UsersAndGroups>CreateUser
# 4- Adding API-Key Target for Lambda Lambda>Configuration>AddTrigger>APIGW>Security:API-Key
# 5- Force API-GW to re-select the Lambda --> APIGW>Resource>Post>IntegrationRequest>LambdaFunction>SelectAnotherRandomThing>ReselectBackTheLambda (CF can not do this as weirdly)
# 6- OPTIONAL-Test Lambda with JSON below
# {
#  "username": "user01",
#  "password": "Password1!"
# }
# 7- OPTIONAL- Deleting Added API-Key Lambda>Configuration>Triggers>DeleteTheAddedOne

Parameters:
   # HostedZoneApiGw:
    #    Type: String
    Runtime:
        Type: String
    MemorySize:
        Type: String
    Timeout:
        Type: String
    EnvironmentName:
        Type: String
    ApiKeySourceType:
        Type: String
    RestApiRandomGetIntegrationUri:
        Type: String
    CognitoDomain:
        Type: String
        MinLength: 3
        MaxLength: 63
        AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$

Resources:
  #ApiGwDNSRecord:
    #Type: AWS::Route53::RecordSet
    #Properties:
      #HostedZoneId: !Ref HostedZoneApiGw
      #Name: apigw.xyz.dev
      #ResourceRecords:
      #- !Sub ${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com/login?response_type=code&client_id=${CognitoUserPoolClient}&redirect_uri=${RestApiRandomGetIntegrationUri}
      #TTL: 60
      #Type: CNAME

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      #AccountRecoverySetting: # Defines which verified available method a user can use to recover their password when they call ForgotPassword
        #RecoveryMechanisms:
          #- Mail: "verified_email"
            #Priority: 1
      #AliasAttributes:
      #  - email
      #  - preferred_username
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub 'Your username is {username} and temporary password is {####}. You need to login and change this temp password to activate your account in https://apigw.intf.dev for ${EnvironmentName}'
          EmailSubject: 'Your temporary password'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: True
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          TemporaryPasswordValidityDays: 7
      UsernameConfiguration:
        CaseSensitive: true
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: 'Your verification code is {####}.'
      EmailVerificationSubject: 'Your verification code'
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      UserPoolTags:
        env: !Ref EnvironmentName
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code is {####}.'
        EmailSubject: 'Your verification code'
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn:
      - RestApi
      - CognitoUserPool
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: RateLimitClientApp
      GenerateSecret: true
      RefreshTokenValidity: 10
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Ref RestApiRandomGetIntegrationUri
      AllowedOAuthFlows:
        - code
        - implicit
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthScopes:
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref CognitoUserPool

  #CognitoUser01:
    #Type: AWS::Cognito::UserPoolUser
    #DependsOn:
      #- CognitoUserPoolDomain
      #- CognitoUserPool
    #Properties:
      #UserPoolId: !Ref CognitoUserPool
      #DesiredDeliveryMediums:
        #- EMAIL
      #UserAttributes:
        #- Name: email
          #Value: umit.seremet@interfolio.com
      #MessageAction: SUPPRESS
      #Username: user01
      #UserPoolId: !Ref CognitoUserPool


  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/ApiGatewayLogGroupForCloudWatch
      RetentionInDays: 7
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Sub '${AWS::StackName}-apigw'
      Name: !Sub '${AWS::StackName}-apigw'
      ApiKeySourceType: !Ref ApiKeySourceType
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
      EndpointConfiguration:
        Types:
        - REGIONAL


  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RestApi
    Properties:
      RestApiId: !Ref RestApi
      Description: Automatically created by the RestApi construct
      StageName: dev-cw
      StageDescription:
        Tags:
          - Key: env
            Value: !Ref EnvironmentName
        Description: Stage - DEV
        LoggingLevel: INFO
        MetricsEnabled: True
        TracingEnabled: True
        AccessLogSetting:
          DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
          Format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":$context.requestTimeEpoch, "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":$context.status, "protocol":"$context.protocol", "responseLength":$context.responseLength }'
    DependsOn:
      - RestApiRandomGet


  #RestApiDeploymentStageDev:
  #  Type: AWS::ApiGateway::Stage
  #  DependsOn:
  #    - RestApi
  #    - RestApiDeployment
  #  Properties:
  #    RestApiId: !Ref RestApi
  #    DeploymentId: !Ref RestApiDeployment
  #    StageName: dev-cw

  RestApiRandom:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - RestApi
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "random"
      RestApiId: !Ref RestApi

  RestApiRandomGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - RestApi
    Properties:
      HttpMethod: GET
      ResourceId: !Ref RestApiRandom
      RestApiId: !Ref RestApi
      ApiKeyRequired: true
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: !Ref RestApiRandomGetIntegrationUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }

  RestApiOauthToken:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - RestApi
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "oauth-token"
      RestApiId: !Ref RestApi

  RestApiOauthTokenPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - RestApi
      - LambdaFunction
    Properties:
      HttpMethod: POST
      ResourceId: !Ref RestApiOauthToken
      RestApiId: !Ref RestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }


  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Policies:
      - PolicyName: LambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Authorization Lambda function for API GW rate limit"
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref Runtime
      Handler: index.lambda_handler
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
      Code:
        ZipFile: !Sub |
          import boto3
          import hmac
          import hashlib
          import base64
          USER_POOL_ID = '${CognitoUserPool}'
          CLIENT_ID = '${CognitoUserPoolClient}'
          CLIENT_SECRET = '${CognitoUserPoolClient.ClientSecret}' #!!! ClientSecret attribute not supported at this time, please use the CLI or Console to retrieve this value
          client = None
          def get_secret_hash(username):
              msg = username + CLIENT_ID
              digest = hmac.new(str(CLIENT_SECRET).encode('utf-8'), msg=str(msg).encode('utf-8'), digestmod=hashlib.sha256).digest()
              dec = base64.b64encode(digest).decode()
              return dec
          def initiate_auth(username, password):
              try:
                  resp = client.admin_initiate_auth(
                      UserPoolId=USER_POOL_ID,
                      ClientId=CLIENT_ID,
                      AuthFlow='ADMIN_NO_SRP_AUTH',
                      AuthParameters={
                          'USERNAME': username,
                          'SECRET_HASH': get_secret_hash(username),
                          'PASSWORD': password
                      },
                      ClientMetadata={
                          'username': username,
                          'password': password
                      })
              except client.exceptions.NotAuthorizedException as e:
                  return None, "The username or password is incorrect"
              except client.exceptions.UserNotFoundException as e:
                  return None, "The username or password is incorrect"
              except Exception as e:
                  print(e)
                  return None, "Unknown error"
              return resp, None


          def refresh_auth(username, refresh_token):
              try:
                  resp = client.admin_initiate_auth(
                      UserPoolId=USER_POOL_ID,
                      ClientId=CLIENT_ID,
                      AuthFlow='REFRESH_TOKEN_AUTH',
                      AuthParameters={
                          'REFRESH_TOKEN': refresh_token,
                          'SECRET_HASH': get_secret_hash(username)
                      },
                      ClientMetadata={
                      })
              except client.exceptions.NotAuthorizedException as e:
                  return None, "The username or password is incorrect"
              except client.exceptions.UserNotFoundException as e:
                  return None, "The username or password is incorrect"
              except Exception as e:
                  print(e)
                  return None, "Unknown error"
              return resp, None
          def lambda_handler(event, context):
              global client
              if client == None:
                  client = boto3.client('cognito-idp')
              username = event['username']
              if 'password' in event:
                  resp, msg = initiate_auth(username, event['password'])

              if 'refresh_token' in event:
                  resp, msg = refresh_auth(username, event['refresh_token'])
              if msg != None:
                  return {
                      'status': 'fail',
                      'msg': msg
                  }

              response = {
                  'status': 'success',
                  'id_token': resp['AuthenticationResult']['IdToken']
              }

              if 'password' in event:
                  response['refresh_token'] = resp['AuthenticationResult']['RefreshToken']

              return response


  ApiKeyGoldenUser01cw:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      Name: ApiKeyGoldenUser01cw
      Description: CloudFormation API Key for GoldenUser01
      Enabled: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: tenant_id
          Value: GoldenUser01
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: dev-cw


  UsagePlanKeyGoldenUser01cw:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      KeyId: !Ref ApiKeyGoldenUser01cw
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanGolden

  ApiKeyGoldenUser02cw:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      Name: ApiKeyGoldenUser02cw
      Description: CloudFormation API Key for GoldenUser02
      Enabled: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: tenant_id
          Value: GoldenUser02
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: dev-cw


  UsagePlanKeyGoldenUser02cw:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      KeyId: !Ref ApiKeyGoldenUser02cw
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanGolden

  ApiKeySilverUser01cw:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      Name: ApiKeySilverUser01cw
      Description: CloudFormation API Key for SilverUser01
      Enabled: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: tenant_id
          Value: SilverUser01
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: dev-cw


  UsagePlanKeySilverUser01cw:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      KeyId: !Ref ApiKeySilverUser01cw
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanSilver


  ApiKeySilverUser02cw:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      Name: ApiKeySilverUser02cw
      Description: CloudFormation API Key for SilverUser02
      Enabled: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: tenant_id
          Value: SilverUser02
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: dev-cw


  UsagePlanKeySilverUser02cw:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      KeyId: !Ref ApiKeySilverUser02cw
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanSilver

  ApiKeyBronzeUser01cw:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      Name: ApiKeyBronzeUser01cw
      Description: CloudFormation API Key for BronzeUser01
      Enabled: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: tenant_id
          Value: BronzeUser01
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: dev-cw


  UsagePlanKeyBronzeUser01cw:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      KeyId: !Ref ApiKeyBronzeUser01cw
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanBronze

  ApiKeyBronzeUser02cw:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      Name: ApiKeyBronzeUser02cw
      Description: CloudFormation API Key for BronzeUser02
      Enabled: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
        - Key: tenant_id
          Value: BronzeUser02
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: dev-cw


  UsagePlanKeyBronzeUser02cw:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      KeyId: !Ref ApiKeyBronzeUser02cw
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanBronze

  UsagePlanGolden:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: dev-cw
      Description: Golden Class Customers
      Quota:
        Limit: 15
        Period: MONTH
      Throttle:
        BurstLimit: 12
        RateLimit: 10
      UsagePlanName: GoldenClass
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  UsagePlanSilver:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: dev-cw
      Description: Silver Class Customers
      Quota:
        Limit: 10
        Period: MONTH
      Throttle:
        BurstLimit: 8
        RateLimit: 6
      UsagePlanName: SilverClass
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  UsagePlanBronze:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApi
      - RestApiDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: dev-cw
      Description: Bronze Class Customers
      Quota:
        Limit: 5
        Period: MONTH
      Throttle:
        BurstLimit: 4
        RateLimit: 13
      UsagePlanName: BronzeClass
      Tags:
        - Key: env
          Value: !Ref EnvironmentName


Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref RestApi

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev-cw/'

#  CognitoUserPoolID:
#    Value: !Ref CognitoUserPool
#    Description: The UserPool ID

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient

  CognitoUserPoolClientIdSecret:
    Value: !GetAtt CognitoUserPoolClient.ClientSecret

  LambdaFuntionArn:
    Value: !GetAtt LambdaFunction.Arn

  HostedPasswordResetURL:
    Value: !Sub https://${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com/login?response_type=code&client_id=${CognitoUserPoolClient}&redirect_uri=${RestApiRandomGetIntegrationUri}
    Description: Password of each NewUser needs to be reset in here for activation
